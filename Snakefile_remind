# SPDX-FileCopyrightText: : 2023 Adrian Odenweller <adrian.odenweller@pik-potsdam.de>, Johannes Hampp <johannes.hampp@pik-potsdam.de>
#
# SPDX-License-Identifier: MIT

from os.path import normpath, exists
from shutil import copyfile, move, rmtree
import numpy as np
import pandas as pd
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
import http.client as http_client

HTTP = HTTPRemoteProvider()

from snakemake.utils import min_version

min_version("7.7")


configfile: "config/config.remind.yaml"


ATLITE_NPROCESSES = config["atlite"].get("nprocesses", 4)

RDIR = "{scenario}/"
IDIR = "i{iteration}/"
CDIR = RDIR if not config.get("run", {}).get("shared_cutouts") else ""

LOGS = "logs/"
SCENARIO_LOGS = LOGS + RDIR
ITERATION_LOGS = SCENARIO_LOGS + IDIR

BENCHMARKS = "benchmarks/"
SCENARIO_BENCHMARKS = BENCHMARKS + RDIR
ITERATION_BENCHMARKS = SCENARIO_BENCHMARKS + IDIR

RESOURCES = "resources/" + (
    "" if config.get("run", {}).get("shared_resources", True) else RDIR
)
SCENARIO_RESOURCES = "resources/" + RDIR
ITERATION_RESOURCES = SCENARIO_RESOURCES + IDIR

RESULTS = "results/"
SCENARIO_RESULTS = RESULTS + RDIR
ITERATION_RESULTS = SCENARIO_RESULTS + IDIR


localrules:
    purge,
    dag,
    sync,
    download_and_prepare,
    extract_coupling_parameters,
    solve_all_scenarios,


wildcard_constraints:
    simpl="[a-zA-Z0-9]*",
    clusters="[0-9]+(m|c)?|all",
    ll="(v|c)([0-9\.]+|opt)",
    opts="[-+a-zA-Z0-9\.]*",
    year="2[01][0-9][05]",
    iteration="[0-9]+",


include: "rules/common.smk"
include: "rules/retrieve.smk"
include: "rules/build_electricity.smk"
include: "rules/solve_electricity.smk"
include: "rules/postprocess.smk"


rule purge:
    run:
        import builtins

        do_purge = builtins.input(
            "Do you really want to delete all generated resources, \nresults and docs (downloads are kept)? [y/N] "
        )
        if do_purge == "y":
            rmtree("resources/", ignore_errors=True)
            rmtree("results/", ignore_errors=True)
            rmtree("doc/_build", ignore_errors=True)
            print("Purging generated resources, results and docs. Downloads are kept.")
        else:
            raise Exception(f"Input {do_purge}. Aborting purge.")


rule dag:
    message:
        "Creating DAG of workflow."
    output:
        dot=RESOURCES + "dag.dot",
        pdf=RESOURCES + "dag.pdf",
        png=RESOURCES + "dag.png",
    conda:
        "envs/environment.yaml"
    shell:
        """
        snakemake --rulegraph all | sed -n "/digraph/,\$p" > {output.dot}
        dot -Tpdf -o {output.pdf} {output.dot}
        dot -Tpng -o {output.png} {output.dot}
        """


rule sync:
    params:
        cluster=f"{config['remote']['ssh']}:{config['remote']['path']}",
    shell:
        """
        rsync -uvarh --ignore-missing-args --files-from=.sync-send . {params.cluster}
        rsync -uvarh --no-g {params.cluster}/results . || echo "No results directory, skipping rsync"
        rsync -uvarh --no-g {params.cluster}/logs . || echo "No logs directory, skipping rsync"
        """


# Rule which downloads and prepares all files which will not change
# during REMIND <-> PyPSA-EUR coupled iterations and repeating runs.
# * Use for downloading on e.g. login node with internet connection
# * will create some load ~30m - 1h for creating renewable profiles
# run with:
# > snakemake -call -s Snakefile_remind download_and_prepare
rule download_and_prepare:
    message:
        "Downloading and preparing all single-execution rules. "
        "Running this rule requires an internet connection for downloading "
        "datafiles for the model."
    input:
        expand(
            "data/costs_{year}.csv",
            year=[2020, 2025, 2030, 2035, 2040, 2045, 2050],
        ),
        rules.build_electricity_demand.output[0],
        **{
            k: v
            for k, v in rules.add_electricity.input.items()
            if "{scenario}" not in v
        },


# # This part contains all rules, which get data from REMIND between iterations.
# # PyPSA-EUR networks are solved between iterations via snakemake calls:
# # > snakemake -call -s Snakefile_remind --config iteration=<iteration> -- remind_solve_all_networks
# #
# # Some of the new rules have additional wildcards:
# # * {year}: Indicating the REMIND year for which the model is built
# # * {iteration}: Indicating the REMIND iteration for which the model is built


# Build cost data compatible with the original PyPSA-EUR cost data structure from technology-data
# as part of the coupling with REMIND.
# Since the cost data is used in multiple rules, the cost data is provided as a dedicated file
# and not only overwritten in the network as part of the "remind_overwrite_elec_network" rule below.
rule import_REMIND_costs:
    input:
        # no TD data for < 2020 and > 2050
        original_costs=lambda w: f"data/costs_{np.clip(int(w['year']), a_min=2020, a_max=2050)}.csv",
        region_mapping="config/regionmapping_21_EU11.csv",
        technology_cost_mapping="config/technology_cost_mapping.csv",
        remind_data=SCENARIO_RESOURCES + "i{iteration}/REMIND2PyPSAEUR.gdx",
    output:
        costs=RESOURCES + "{scenario}/i{iteration}/y{year}/costs.csv",
    log:
        LOGS + "{scenario}/i{iteration}/y{year}/import_REMIND_costs.log",
    benchmark:
        BENCHMARKS + "{scenario}/i{iteration}/y{year}/import_REMIND_costs"
    group:
        "iy"
    script:
        "scripts/import_REMIND_costs.py"


# Build load data time-series based on REMIND annual load per region and default PyPSA-EUR load profiles.
rule import_REMIND_load:
    input:
        load_timeseries=RESOURCES + "load.csv",
        region_mapping="config/regionmapping_21_EU11.csv",
        remind_data=SCENARIO_RESOURCES + "i{iteration}/REMIND2PyPSAEUR.gdx",
    output:
        load_timeseries=SCENARIO_RESOURCES + "i{iteration}/y{year}/load.csv",
    log:
        LOGS + "{scenario}/i{iteration}/y{year}/import_REMIND_load.log",
    benchmark:
        BENCHMARKS + "{scenario}/i{iteration}/y{year}/import_REMIND_load"
    group:
        "iy"
    script:
        "scripts/import_REMIND_load.py"


# Build csv with min capacities for PyPSA-EUR based on installed capacities from REMIND.
# Used as RCL (Region-Carrier-Limits) contraints in PyPSA-EUR.
rule import_REMIND_RCL_p_nom_limits:
    input:
        remind_data=SCENARIO_RESOURCES + "i{iteration}/REMIND2PyPSAEUR.gdx",
        region_mapping="config/regionmapping_21_EU11.csv",
        technology_cost_mapping="config/technology_cost_mapping.csv",
    output:
        RCL_p_nom_limits=SCENARIO_RESOURCES
        + "i{iteration}/y{year}/RCL_p_nom_limits.csv",
    log:
        LOGS + "{scenario}/i{iteration}/y{year}/import_REMIND_RCL_p_nom_limits.log",
    benchmark:
        BENCHMARKS + "{scenario}/i{iteration}/y{year}/import_REMIND_RCL_p_nom_limits"
    group:
        "iy"
    script:
        "scripts/import_REMIND_RCL_p_nom_limits.py"


# CO2 price is integrated into model either via config.yaml or via a wildcard
# we do not want to modify the config.yaml, so we use an approach to pass the CO2 price via a wildcard.
# For this we make use of the conditional execution from snakemake via checkpoints (see https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#data-dependent-conditional-execution), were first the checkpoint is executed
# and then we construct based on the checkpoint results the actual rule call and its input which will then solve the networks
# with their respective CO2 prices:
# 1. checkpoint determine_co2_price_scenarios: extract CO2 prices from REMIND + combine with scenario from config.yaml
# 2. rule solve_all_scenarios: Use the output of the checkpoint to solve all scenarios with specific CO2 prices
checkpoint determine_co2_price_scenarios:
    input:
        region_mapping="config/regionmapping_21_EU11.csv",
        remind_data=SCENARIO_RESOURCES + "i{iteration}/REMIND2PyPSAEUR.gdx",
    output:
        co2_price_scenarios=RESULTS + "{scenario}/i{iteration}/co2_price_scenarios.csv",
    log:
        LOGS + "{scenario}/i{iteration}/determine_co2_price_scenarios.log",
    benchmark:
        BENCHMARKS + "{scenario}/i{iteration}/determine_co2_price_scenarios"
    localrule: True  # Checkpoints cannot be declared "local" with "localrules" statement on top, needs individual declaration as local
    script:
        "scripts/determine_CO2_price_scenarios.py"


# snakemake -n -call -s Snakefile_remind solve_all_scenarios --config remind_scenario=no_scenario iteration=
rule solve_all_scenarios:
    input:
        networks=lambda wildcards: expand(
            RESULTS
            + "{scenario}/i{iteration}/y{year}/networks/elec_s{simpl}_{clusters}_ec_l{ll}_{opts}.nc",
            zip,
            **pd.read_csv(
                checkpoints.determine_co2_price_scenarios.get(
                    scenario=wildcards["scenario"],
                    iteration=wildcards["iteration"],
                ).output["co2_price_scenarios"],
                na_filter=False,
            ).to_dict(orient="list")
        ),


# Extract coupling parameters from PyPSA-EUR runs for hand-over to next iteration of REMIND-EU
rule extract_coupling_parameters:
    input:
        networks=rules.solve_all_scenarios.input["networks"],
        region_mapping="config/regionmapping_21_EU11.csv",
        technology_cost_mapping="config/technology_cost_mapping.csv",
        remind_weights=SCENARIO_RESOURCES + "i{iteration}/REMIND2PyPSAEUR.gdx",
    output:
        capacity_factors=RESULTS
        + "{scenario}/i{iteration}/validation/capacity_factors.csv",
        availability_factors=RESULTS
        + "{scenario}/i{iteration}/validation/availability_factors.csv",
        curtailments=RESULTS + "{scenario}/i{iteration}/validation/curtailments.csv",
        generation_shares=RESULTS
        + "{scenario}/i{iteration}/validation/generation_shares.csv",
        preinstalled_capacities=RESULTS
        + "{scenario}/i{iteration}/validation/preinstalled_capacities.csv",
        peak_residual_loads=RESULTS
        + "{scenario}/i{iteration}/validation/peak_residual_loads.csv",
        grid_capacities=RESULTS
        + "{scenario}/i{iteration}/validation/grid_capacities.csv",
        grid_investments=RESULTS
        + "{scenario}/i{iteration}/validation/grid_investments.csv",
        market_values=RESULTS + "{scenario}/i{iteration}/validation/market_values.csv",
        hourly_electricity_prices=RESULTS
        + "{scenario}/i{iteration}/validation/hourly_electricity_prices.csv",
        electricity_prices=RESULTS
        + "{scenario}/i{iteration}/validation/electricity_prices.csv",
        electricity_loads=RESULTS
        + "{scenario}/i{iteration}/validation/electricity_loads.csv",
        generations=RESULTS + "{scenario}/i{iteration}/validation/generations.csv",
        potentials=RESULTS + "{scenario}/i{iteration}/validation/potentials.csv",
        optimal_capacities=RESULTS
        + "{scenario}/i{iteration}/validation/optimal_capacities.csv",
        technology_mapping=RESULTS
        + "{scenario}/i{iteration}/validation/technology_mapping.csv",
        gdx=RESULTS + "{scenario}/i{iteration}/PyPSAEUR2REMIND.gdx",
    log:
        LOGS + "{scenario}/i{iteration}/extract_coupling_parameters.log",
    benchmark:
        BENCHMARKS + "{scenario}/i{iteration}/extract_coupling_parameters/"
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 10000,
        walltime="00:10:00",
    script:
        "scripts/extract_coupling_parameters.py"
