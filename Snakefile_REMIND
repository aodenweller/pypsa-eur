# SPDX-FileCopyrightText: : 2017-2024 The PyPSA-Eur Authors
# Changes by Adrian Odenweller <adrian.odenweller@pik-potsdam.de>, Johannes Hampp <johannes.hampp@pik-potsdam.de>
#
# SPDX-License-Identifier: MIT

from pathlib import Path
import yaml
from os.path import normpath, exists
from shutil import copyfile, move, rmtree
from snakemake.utils import min_version
import numpy as np
import pandas as pd

min_version("8.11")

from scripts._helpers import path_provider, copy_default_files, get_scenarios, get_rdir

copy_default_files(workflow)

configfile: "config/config.remind.yaml"

run = config["run"]
#scenarios = get_scenarios(run)
#RDIR = get_rdir(run)

shared_resources = run["shared_resources"]["policy"]
exclude_from_shared = run["shared_resources"]["exclude"]
logs = path_provider("logs/", "", shared_resources, exclude_from_shared)
benchmarks = path_provider("benchmarks/", "", shared_resources, exclude_from_shared)
resources = path_provider("resources/", "", shared_resources, exclude_from_shared)

# REMIND coupling specific directories
# Structure, e.g.: resources/{scenario}/i{iteration}/y{year}/
RDIR = "{scenario}/"
IDIR = "i{iteration}/"
CDIR = RDIR if not config.get("run", {}).get("shared_cutouts") else ""

LOGS = "logs/"
SCENARIO_LOGS = LOGS + RDIR
ITERATION_LOGS = SCENARIO_LOGS + IDIR

BENCHMARKS = "benchmarks/"
SCENARIO_BENCHMARKS = BENCHMARKS + RDIR
ITERATION_BENCHMARKS = SCENARIO_BENCHMARKS + IDIR

RESOURCES = "resources/" + (
    "" if shared_resources else RDIR
)
SCENARIO_RESOURCES = "resources/" + RDIR
ITERATION_RESOURCES = SCENARIO_RESOURCES + IDIR

RESULTS = "results/"
SCENARIO_RESULTS = RESULTS + RDIR
ITERATION_RESULTS = SCENARIO_RESULTS + IDIR

# Rules that are run locally, not via a SLURM job
localrules:
    purge,
    dag,
    sync,
    download_and_prepare,
    solve_all_scenarios,
    export_to_REMIND

wildcard_constraints:
    simpl="[a-zA-Z0-9]*",
    clusters="[0-9]+(m|c)?|all",
    ll=r"(v|c)([0-9\.]+|opt)",
    opts=r"[-+a-zA-Z0-9\.]*",
    year="2[01][0-9][05]",
    scenario=".*",
    iteration="[0-9]+",


include: "rules/common.smk"
include: "rules/retrieve.smk"
include: "rules/build_electricity.smk"
include: "rules/solve_electricity.smk"


rule purge:
    run:
        import builtins

        do_purge = builtins.input(
            "Do you really want to delete all generated resources, \nresults and docs (downloads are kept)? [y/N] "
        )
        if do_purge == "y":
            rmtree("resources/", ignore_errors=True)
            rmtree("results/", ignore_errors=True)
            rmtree("doc/_build", ignore_errors=True)
            print("Purging generated resources, results and docs. Downloads are kept.")
        else:
            raise Exception(f"Input {do_purge}. Aborting purge.")


rule dag:
    message:
        "Creating DAG of workflow."
    output:
        dot=resources("dag.dot"),
        pdf=resources("dag.pdf"),
        png=resources("dag.png"),
    conda:
        "envs/environment.yaml"
    shell:
        r"""
        snakemake --rulegraph all | sed -n "/digraph/,\$p" > {output.dot}
        dot -Tpdf -o {output.pdf} {output.dot}
        dot -Tpng -o {output.png} {output.dot}
        """


rule doc:
    message:
        "Build documentation."
    output:
        directory("doc/_build"),
    shell:
        "make -C doc html"


rule sync:
    params:
        cluster=f"{config['remote']['ssh']}:{config['remote']['path']}",
    shell:
        """
        rsync -uvarh --ignore-missing-args --files-from=.sync-send . {params.cluster}
        rsync -uvarh --no-g {params.cluster}/resources . || echo "No resources directory, skipping rsync"
        rsync -uvarh --no-g {params.cluster}/results . || echo "No results directory, skipping rsync"
        rsync -uvarh --no-g {params.cluster}/logs . || echo "No logs directory, skipping rsync"
        """


# Helper function to evaluate input functions in the config file.
def evaluate_inputs(input_dict):
    evaluated = {}
    for k, v in input_dict.items():
        if callable(v):
            # Set dummy wild card so that update_config_from_wildcards runs without errors
            evaluated[k] = v({"iteration": 1, "year": 2025, "scenario": "default"})
        else:
            evaluated[k] = v
    return evaluated

# Rule which downloads and prepares all files which will not change
# during REMIND <-> PyPSA-EUR coupled iterations and repeating runs.
# * Use for downloading on e.g. login node with internet connection
# * will create some load ~30m - 1h for creating renewable profiles
# run with:
# > snakemake -call -s Snakefile_remind download_and_prepare
rule download_and_prepare:
    message:
        "Downloading and preparing all single-execution rules. "
        "Running this rule requires an internet connection for downloading "
        "datafiles for the model."
    input:
        # Retrieve cost data
        expand(
            "resources/costs_{year}.csv",
            year=[2020, 2025, 2030, 2035, 2040, 2045, 2050],
        ),
        # Retrieve cutouts and create profiles
        expand(
            "resources/profile_{technology}.nc",
            technology=["onwind", "offwind-ac", "offwind-dc", "solar", "hydro"],
        ),
        # Retrieve electricity demand data
        rules.build_electricity_demand.output[0],
        # Retrieve databundle for rule add_electricity
        **{
            k: v
            for k, v in evaluate_inputs(rules.add_electricity.input).items()
            if "{scenario}" not in v
        }

# # This part contains all rules, which get data from REMIND between iterations.
# # PyPSA-EUR networks are solved between iterations via snakemake calls
# #
# # Some of the new rules have additional wildcards:
# # * {year}: Indicating the REMIND year for which the model is built
# # * {iteration}: Indicating the REMIND iteration for which the model is built

# This rule need to be called first in a separate snakemake call.
# Afterwards, use --configfile in the next snakemake call.
# 1) Import REMIND config and change config.remind_scenario.yaml accordingly
#    This enables changes to the config.yaml file, depending on REMIND switches
# 2) Import CO2 prices from REMIND and create co2_price_scenarios.csv
#    This is used to give CO2 prices to PyPSA-Eur via wildcards and 
#    also to determine in which years PyPSA-Eur should run
# TODO: Only use this to create the co2_price_scenarios.csv file for the non-perturbed scenarios
#       Then use another conditional checkpoint after solve_all_networks to create the perturbed
#       networks, if any. These can then be created only for certain technologies.
# TODO: Change such that config.remind_scenario.yaml only contains the changes, not the whole file
checkpoint import_REMIND_config:
    input:
        config_default="config/config.remind.yaml",
        remind2config="config/remind2config.yaml",
        remind_config=RESOURCES + "{scenario}/i{iteration}/REMIND2PyPSAEUR_config.gdx",
        remind_data=SCENARIO_RESOURCES + "i{iteration}/REMIND2PyPSAEUR.gdx",
        region_mapping="config/regionmapping_21_EU11.csv",
    output:
        config=RESOURCES + "{scenario}/i{iteration}/config.remind_scenario.yaml",
        co2_price_scenarios=RESOURCES + "{scenario}/i{iteration}/co2_price_scenarios.csv",
    log:
        ITERATION_LOGS + "import_REMIND_config.log",
    benchmark:
        ITERATION_BENCHMARKS + "import_REMIND_config"
    localrule: True  # Checkpoints cannot be declared "local" with "localrules" statement on top, needs individual declaration as local
    script:
        "scripts/import_REMIND_config.py"


# Build cost data compatible with the original PyPSA-EUR cost data structure from technology-data
# as part of the coupling with REMIND.
# Since the cost data is used in multiple rules, the cost data is provided as a dedicated file
# and not only overwritten in the network as part of the "remind_overwrite_elec_network" rule below.
rule import_REMIND_costs:
    input:
        # no TD data for < 2020 and > 2050
        original_costs=lambda w: f"resources/costs_{np.clip(int(w['year']), a_min=2020, a_max=2050)}.csv",
        original_costs_2025="resources/costs_2025.csv",
        original_costs_2030="resources/costs_2030.csv",
        region_mapping="config/regionmapping_21_EU11.csv",
        technology_cost_mapping="config/technology_cost_mapping.csv",
        remind_data=SCENARIO_RESOURCES + "i{iteration}/REMIND2PyPSAEUR.gdx",
    output:
        costs=RESOURCES + "{scenario}/i{iteration}/y{year}/costs.csv",
    log:
        LOGS + "{scenario}/i{iteration}/y{year}/import_REMIND_costs.log",
    benchmark:
        BENCHMARKS + "{scenario}/i{iteration}/y{year}/import_REMIND_costs"
    group:
        "iy"
    script:
        "scripts/import_REMIND_costs.py"


# Build load data time-series based on REMIND annual load per region and default PyPSA-EUR load profiles.
rule import_REMIND_load:
    input:
        load_timeseries=RESOURCES + "electricity_demand.csv",
        region_mapping="config/regionmapping_21_EU11.csv",
        remind_data=SCENARIO_RESOURCES + "i{iteration}/REMIND2PyPSAEUR.gdx",
    output:
        load_timeseries=SCENARIO_RESOURCES + "i{iteration}/y{year}/electricity_demand.csv",
    log:
        LOGS + "{scenario}/i{iteration}/y{year}/import_REMIND_load.log",
    benchmark:
        BENCHMARKS + "{scenario}/i{iteration}/y{year}/import_REMIND_load"
    group:
        "iy"
    script:
        "scripts/import_REMIND_load.py"


# Build csv with min capacities for PyPSA-EUR based on installed capacities from REMIND.
# Used as RCL (Region-Carrier-Limits) contraints in PyPSA-EUR.
rule import_REMIND_RCL_p_nom_limits:
    input:
        remind_data=SCENARIO_RESOURCES + "i{iteration}/REMIND2PyPSAEUR.gdx",
        region_mapping="config/regionmapping_21_EU11.csv",
        technology_cost_mapping="config/technology_cost_mapping.csv",
    output:
        RCL_p_nom_limits=SCENARIO_RESOURCES
        + "i{iteration}/y{year}/RCL_p_nom_limits.csv",
    log:
        LOGS + "{scenario}/i{iteration}/y{year}/import_REMIND_RCL_p_nom_limits.log",
    benchmark:
        BENCHMARKS + "{scenario}/i{iteration}/y{year}/import_REMIND_RCL_p_nom_limits"
    group:
        "iy"
    script:
        "scripts/import_REMIND_RCL_p_nom_limits.py"


def get_networks(wildcards):
    """Generate network file paths dynamically based on the perturbation flag."""
    base_path = RESULTS + "{scenario}/i{iteration}/y{year}/networks/elec_s{simpl}_{clusters}_ec_l{ll}_{opts}"
    co2_price_scenarios = pd.read_csv(
        checkpoints.import_REMIND_config.get(
            scenario=wildcards.scenario,
            iteration=wildcards.iteration,
        ).output["co2_price_scenarios"],
        na_filter=False,
    ).to_dict(orient="list")

    # Check if 'ptech' is a key in co2_price_scenarios
    if "ptech" in co2_price_scenarios:
        # Expand operational networks (_op.nc)
        # Requiring the trigger file -> allowed to fail!
        if config["remind_coupling"]["export_to_REMIND"]["dispatch_networks"]:
            operational_networks = expand(
                base_path + "_op_trigger",
                zip,
                **co2_price_scenarios,
            )
        else:
            operational_networks = expand(
                base_path + ".nc",
                zip,
                **co2_price_scenarios,
            )
        # Expand perturbed networks (_op_{ptech}_trigger)
        # Requiring the trigger file -> allowed to fail! 
        perturbed_triggers = expand(
            base_path + "_op_perturb_{ptech}_trigger",
            zip,
            **co2_price_scenarios,
        )
        return operational_networks + perturbed_triggers
    else:
        # Expand only capacity expansion model (cem) networks (.nc)
        # Requiring the .nc file -> not allowed to fail!
        return expand(
            base_path + ".nc",
            zip,
            **co2_price_scenarios,
        )

rule solve_all_scenarios:
    input:
        networks_trigger=lambda wildcards: get_networks(wildcards),
    output:
        # Dummy file that can be called to provide wildcards and call the rule
        # e.g. snakemake -s Snakefile_remind results/test/i1/solve_all_scenarios
        trigger_all=touch(RESULTS + "{scenario}/i{iteration}/solve_all_scenarios")

def find_available_files(wildcards):
    """Finds available network files and logs missing ones."""
    # Base file path
    base_path = RESULTS + "{scenario}/i{iteration}/y{year}/networks/elec_s{simpl}_{clusters}_ec_l{ll}_{opts}"
    # Determine file patterns based on the configuration
    file_patterns = [base_path + ".nc"]
    if config["remind_coupling"]["export_to_REMIND"]["dispatch_networks"]:
        file_patterns = file_patterns + [base_path + "_op.nc"]
    if config["remind_coupling"]["perturbation"]["enable"]:
        file_patterns = file_patterns + [base_path + "_op_perturb_{ptech}.nc"]
    # Get scenarios and expand network file paths
    scenarios = pd.read_csv(
        checkpoints.import_REMIND_config.get(
            scenario=wildcards.scenario, iteration=wildcards.iteration
        ).output.co2_price_scenarios,
        na_filter=False,
    ).to_dict(orient="list")
    # Expand all file patterns
    network_files = []
    for pattern in file_patterns:
        network_files.extend(expand(pattern, zip, **scenarios))
    # Log missing files and return existing ones
    existing_files = set([f for f in network_files if os.path.exists(f)])
    missing_files = set(network_files) - set(existing_files)
    if missing_files:
        logger.warning(f"Missing files: {missing_files}")
    return existing_files

# Export PyPSA-Eur results to REMIND and create additional reporting
rule export_to_REMIND:
    params:
        perturbation=config_provider("remind_coupling", "perturbation"),
        export_settings=config_provider("remind_coupling", "export_to_REMIND"),
    input:
        # Dynamically check for existing files (this allows files to be missing)
        networks=find_available_files,
        # Trigger the solve_all_scenarios rule (see above for details 
        **rules.solve_all_scenarios.input,
        region_mapping="config/regionmapping_21_EU11.csv",
        technology_cost_mapping="config/technology_cost_mapping.csv",
        remind_weights=ITERATION_RESOURCES + "REMIND2PyPSAEUR.gdx",
    output:
        gdx=ITERATION_RESULTS + "PyPSAEUR2REMIND.gdx",
        coupling_parameters=directory(ITERATION_RESULTS + "coupling_parameters"),
        reporting_parameters=directory(ITERATION_RESULTS + "reporting_parameters"),
    log:
        ITERATION_LOGS + "export_to_REMIND.log",
    benchmark:
        ITERATION_BENCHMARKS + "export_to_REMIND"
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 30000,
        walltime="00:10:00",
    script:
        "scripts/export_to_REMIND.py"
